#!/usr/bin/php
<?php

$kind = $argv[1];
$ownername = $argv[2];
$reponame = $argv[3];
$token = $argv[4];

function httpHeader() {
  global $token;
  return array(
    "Authorization: token ".$token,
    "Accept: application/vnd.github.loki-preview+json",
    "Content-Type: application/json"
  );
}

function createCurlRequest($query) {
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, "https://api.github.com/$query");
  curl_setopt($ch, CURLOPT_USERAGENT, 'mdm-configurator');
  curl_setopt($ch, CURLOPT_HTTPHEADER, httpHeader());
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  return $ch;
}

function createPutRequest($query, $data) {
  $json = json_encode($data);
  $ch = createCurlRequest($query);
  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "PUT");
  curl_setopt($ch, CURLOPT_POSTFIELDS, $json);
  return $ch;
}

function checkCurlResponse($server_output) {
  if (!$server_output) {
    return true;
  }
  $result = json_decode($server_output, TRUE);
  switch(json_last_error()) {
      case JSON_ERROR_NONE:
      break;
      default:
      return false;
  }
  if ($result['message']) {
    echo "github: API request failed with message ".$result['message']."\n";
    return false;
  }
  return true;
}

// Set the default branch to develop
// Disable the wiki
function configureRepo($ownername, $reponame) {
  $ch = createCurlRequest("repos/$ownername/$reponame");
  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "PATCH");
  curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array(
    "name" => $reponame,
    "default_branch" => "develop",
    "has_wiki" => false
  )));
  $server_output = curl_exec($ch);
  curl_close($ch);
  if (!checkCurlResponse($server_output)) {
    echo "Failed to configure repo $ownername/$reponame\n";
    return false;
  }
  return true;
}

// Add a team to a repo
function addTeamToRepo($ownername, $reponame, $teamid, $permission) {
  $ch = createPutRequest("teams/$teamid/repos/$ownername/$reponame", array(
    "permission" => $permission
  ));
  $server_output = curl_exec($ch);
  curl_close($ch);
  if (!checkCurlResponse($server_output)) {
    echo "Failed to add team $teamid to $ownername/$reponame\n";
    return false;
  }
  return true;
}

// Protect a branch
function protectBranch($ownername, $reponame, $branch, $teamslugs) {
  $ch = createPutRequest("repos/$ownername/$reponame/branches/$branch/protection", array(
    "required_status_checks" => null,
    "restrictions" => array(
      "users" => array(),
      "teams" => $teamslugs
    )
  ));
  $server_output = curl_exec($ch);
  curl_close($ch);
  if (!checkCurlResponse($server_output)) {
    echo "Failed to protect branch $branch in $ownername/$reponame\n";
    return false;
  }
  return true;
}

function endsWith($haystack, $needle) {
  return $needle === "" || (($temp = strlen($haystack) - strlen($needle)) >= 0 && strpos($haystack, $needle, $temp) !== false);
}

// MAIN script logic

if (!configureRepo($ownername, $reponame)) {
  exit(1);
}

// Get teams
$ch = createCurlRequest("orgs/$ownername/teams");
$server_output = curl_exec($ch);
curl_close($ch);
if (!checkCurlResponse($server_output)) {
  return;
}

// Add core team as collaborator
$teams = json_decode($server_output, TRUE);
foreach ($teams as $team) {
  if ($team['slug'] == 'core-team') {
    echo "Adding ".$team['name']." to $ownername/$reponame...\n";
    addTeamToRepo($ownername, $reponame, $team['id'], 'admin');
  } else if (endsWith($team['slug'], "-$kind")) {
    echo "Adding ".$team['name']." to $ownername/$reponame...\n";
    addTeamToRepo($ownername, $reponame, $team['id'], 'push');
  }
}

echo "Protecting branches...\n";
protectBranch($ownername, $reponame, 'develop', array(
  "core-team",
  "frequent-contributors-$kind"
));
protectBranch($ownername, $reponame, 'stable', array(
  "core-team"
));
