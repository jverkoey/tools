#!/bin/bash -e
#
# Copyright 2016-present The Material Motion Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

parentcmd=$(basename "${BASH_SOURCE[1]}")
cmd=$(basename "${BASH_SOURCE[0]}")

usage() {
  $parentcmd help $cmd
}

new_branch() {
  if [ -z "$1" ]; then
    usage
    exit 1
  fi

  echo "Creating new branch $1"
  arc feature "$1"
}

print_tree() {
  tree="$(git log --oneline --abbrev-commit --graph --decorate --color origin/develop..HEAD)"

  if [ -z "$tree" ]; then
    echo "No commits yet."
  else
    echo "$tree"
  fi
}

edit_sha() {
  if [ -z "$1" ]; then
    usage
    exit 1
  fi

  sha="$1"
  cmd="edit"
  if [ $# -ge 2 ]; then
      cmd="$2"
  fi

  EDITOR="sed -i -e 's/^pick $sha/$cmd $sha/'" git rebase -i
}

continue_rebase() {
  git rebase --continue
}

abort_rebase() {
  git rebase --abort
}

export_diff() {
  sha="";
  flags=$@
  if [[ ! -z "$1" ]] && [[ "$(_get_object_type $1)" == "commit" ]]; then
    if ! _is_local_sha "$1"; then
      echo "sha $1 is not in local history. Run 'mdm git tree' to find a local sha."
      exit 1
    fi

    sha="$1"
    flags=${@:2}
  fi

  if [[ ! -z "$sha" ]]; then
    echo "Checking out $sha via rebase"
    edit_sha "$sha"
  fi

  echo "Running arc diff HEAD~ $flags"
  arc diff HEAD~ $flags

  if [[ ! -z "$sha" ]]; then
    echo "Exiting rebase"
    continue_rebase
  fi
}

submit_diff() {
  sha=""
  flags=$@
  if [[ ! -z "$1" ]] && [[ "$(_get_object_type $1)" == "commit" ]]; then
    if ! _is_local_sha "$1"; then
      echo "sha $1 is not in local history. Run 'mdm git tree' to find a local sha."
      exit 1
    fi

    sha="$1"
    flags=${@:2}
  fi

  if [[ ! -z "$sha" ]]; then
    echo "Running arc land --keep-branch $flags $sha"
    arc land --keep-branch $flags "$sha"
  else
    echo "Running arc land $flags"
    arc land $flags
  fi

  if [ $? -eq 0 ]; then
    echo "Submitted successfully. Syncing to latest."
    _sync
  fi
}

_get_object_type() {
  if [[ ! -z "$1" ]]; then
    git cat-file -t "$1" 2>/dev/null
  fi
}

_is_local_sha() {
  match="$(git rev-parse $1 2>/dev/null)"
  shas="$(git rev-list origin/develop..HEAD)"
  for sha in $shas; do
    if [ "$sha" == "$match" ]; then
      true
      return
    fi
  done

  false
  return
}

_sync() {
  git checkout develop
  git pull
  git checkout -

  git rebase develop
}

case "$1" in
  # Step 1
  new)              new_branch ${@:2} ;;

  # Step 2
  tree)             print_tree ${@:2} ;;
  edit)             edit_sha ${@:2} ;;
  continue)         continue_rebase ${@:2} ;;
  abort)            abort_rebase ${@:2} ;;

  # Step 3
  export)           export_diff ${@:2} ;;

  # Step 4
  submit)           submit_diff ${@:2} ;;

  # Private
  _get_object_type) _get_object_type ${@:2} ;;
  _is_local_sha)    _is_local_sha ${@:2} ;;
  _sync)            _sync ${@:2} ;;

  # Help
  *)                usage ;;
esac
