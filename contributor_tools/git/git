#!/bin/bash -e
#
# Copyright 2016-present The Material Motion Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

parentcmd=$(basename "${BASH_SOURCE[1]}")
cmd=$(basename "${BASH_SOURCE[0]}")

usage() {
  $parentcmd help $cmd
}

new_branch() {
  if [ -z "$1" ]; then
    usage
    exit 1
  fi

  echo "Creating new branch $1"
  arc feature "$1"
}

print_tree() {
  tree="$(git log --oneline --abbrev-commit --graph --decorate --color origin/develop..HEAD)"

  if [ -z "$tree" ]; then
    echo "All of your commits have already landed on origin/develop."
  else
    echo "$tree"
  fi
}

edit_sha() {
  if [ -z "$1" ]; then
    usage
    exit 1
  fi

  sha="$(_get_sha $1)"
  cmd="edit"
  if [ $# -ge 2 ]; then
      cmd="$2"
  fi

  # Replace "pick $sha" and "# pick $sha" with "$cmd $sha".
  regex="'s/^\(# \)\{0,1\}pick $sha/$cmd $sha/'"
  EDITOR="sed -i -e $regex" git rebase -i
}

continue_rebase() {
  git rebase --continue
}

abort_rebase() {
  git rebase --abort
}

export_diff() {
  sha="$(_get_sha $1)";
  flags="$@"
  if [[ ! -z "$sha" ]]; then
    flags="${@:2}"
  fi

  # Default to HEAD.
  if [[ -z "$sha" ]]; then
    sha="$(_get_sha HEAD)"
  fi

  if [[ -z "$sha" ]]; then
    echo "No local commits available." 1>&2
    exit 1
  fi

  echo "Checking out $sha via rebase"
  edit_sha "$sha"


  echo "Running 'arc diff HEAD~ $flags'"
  arc diff HEAD~ $flags || true

  echo "Exiting rebase"
  continue_rebase

  echo
  echo "Your current local commits:"
  print_tree
}

submit_diff() {
  sha="$(_get_sha $1)";
  flags="$@"
  if [[ ! -z "$sha" ]]; then
    flags="${@:2}"
  fi

  # Default to BASE.
  if [[ -z "$sha" ]]; then
    sha="$(_get_sha BASE)"
  fi

  if [[ -z "$sha" ]]; then
    echo "No local commits available." 1>&2
    exit 1
  fi

  if [ "$(git rev-list --abbrev-commit origin/develop..HEAD | wc -l)" -gt "1" ]; then
    echo "Running 'arc land $flags --keep-branch $sha'"
    arc land $flags --keep-branch "$sha"
  else
    echo "Running 'arc land $flags'"
    arc land $flags
  fi

  if [ $? -eq 0 ]; then
    echo "Submitted successfully. Syncing to latest."
    _sync
  fi

  echo
  echo "Your current local commits:"
  print_tree
}

_is_local_sha() {
  shas="$(git rev-list --abbrev-commit origin/develop..HEAD)"
  for sha in $shas; do
    if [ "$sha" == "$1" ]; then
      true
      return
    fi
  done

  false
  return
}

_get_sha() {
  ref="$1"
  upper_ref="$(echo $ref | tr '[:lower:]' '[:upper:]')"

  if [[ "$upper_ref" == "BASE" ]] || [[ "$upper_ref" == "BASE+"* ]]; then
    count="$(git rev-list --abbrev-commit origin/develop..HEAD | wc -l)"

    if [[ "$upper_ref" == "BASE" ]]; then
      index="0"
    else
      index="${ref#BASE+}"
      if [[ -z "$index" ]]; then
        index="1"
      fi
    fi

    ref="HEAD~$(($count - $index - 1))"
  fi

  sha="$(git rev-parse --short $ref 2>/dev/null)"

  if [[ ! -z "$sha" ]] && ! _is_local_sha "$sha"; then
    echo "sha $1 is not in local history. Run '$parentcmd $cmd tree' to find a local sha." 1>&2
    exit 1
  fi

  echo "$sha"
}

_sync() {
  git checkout develop
  git pull
  git checkout -

  git rebase develop
}

case "$1" in
  # Step 1
  new)              new_branch ${@:2} ;;

  # Step 2
  tree)             print_tree ${@:2} ;;
  edit)             edit_sha ${@:2} ;;
  continue)         continue_rebase ${@:2} ;;
  abort)            abort_rebase ${@:2} ;;

  # Step 3
  export)           export_diff ${@:2} ;;

  # Step 4
  submit)           submit_diff ${@:2} ;;

  # Private
  _is_local_sha)    _is_local_sha ${@:2} ;;
  _get_sha)         _get_sha ${@:2} ;;
  _sync)            _sync ${@:2} ;;

  # Help
  *)                usage ;;
esac
